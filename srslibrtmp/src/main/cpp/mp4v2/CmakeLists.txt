cmake_minimum_required(VERSION 3.4.1)

project(mp4v2)

SET(cmake_dir ${CMAKE_CURRENT_SOURCE_DIR})  #cmake所在的目录

SET(src_dir src)
SET(inc_dir include)
SET(lib_name mp4v2)
SET(lib_static ${lib_name})
SET(lib_shared ${lib_name}_shared)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -fexceptions -Wno-write-strings -O2 -DHAVE_SOCKLEN_T -DHAVE_STRUCT_IOVEC")

message("------------------------------Cmake build ${lib_name}-----------------------------")
message("project source dir==>${PROJECT_SOURCE_DIR}")
message("Cmake file dir==>${CMAKE_CURRENT_SOURCE_DIR}")

#查找目录下所有的源文件，并保存在指定变量ly_source_files中,遗憾的是它不能像File递归查找
aux_source_directory(src source_files)
aux_source_directory(src/bmff source_files)
aux_source_directory(src/itmf source_files)
aux_source_directory(src/qtff source_files)
aux_source_directory(libplatform source_files)
aux_source_directory(libplatform/io source_files)
aux_source_directory(libplatform/number source_files)
aux_source_directory(libplatform/process source_files)
aux_source_directory(libplatform/prog source_files)
aux_source_directory(libplatform/sys source_files)
aux_source_directory(libplatform/time source_files)
aux_source_directory(libutil source_files)


#排序之后的文件
message("-----------------The following is the sorted source file--------------------")
foreach (_var ${source_files})
    if (_var MATCHES "_win32.cpp")
        message("remove win32==>${_var}")
        list(REMOVE_ITEM source_files ${_var})
    endif ()
endforeach ()


set_property(SOURCE ${source_files} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfpu=neon")

# include目录  AFTER OR BEFORE 表示添加在之前还是之后,SYSTEM表示系统包含目录
# https://cmake.org/cmake/help/latest/command/include_directories.html
include_directories(${cmake_dir} ${cmake_dir}/include
        ${cmake_dir}/src ${cmake_dir}/libutil ${cmake_dir}/libplatform)


ADD_LIBRARY(${lib_static} STATIC ${source_files})
target_compile_options(${lib_static}
        PRIVATE
        -std=c++03)